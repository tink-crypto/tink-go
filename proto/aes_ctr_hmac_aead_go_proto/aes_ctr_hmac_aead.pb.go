// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: aes_ctr_hmac_aead.proto

package aes_ctr_hmac_aead_go_proto

import (
	aes_ctr_go_proto "github.com/tink-crypto/tink-go/v2/proto/aes_ctr_go_proto"
	hmac_go_proto "github.com/tink-crypto/tink-go/v2/proto/hmac_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AesCtrHmacAeadKeyFormat struct {
	state           protoimpl.MessageState            `protogen:"open.v1"`
	AesCtrKeyFormat *aes_ctr_go_proto.AesCtrKeyFormat `protobuf:"bytes,1,opt,name=aes_ctr_key_format,json=aesCtrKeyFormat,proto3" json:"aes_ctr_key_format,omitempty"`
	HmacKeyFormat   *hmac_go_proto.HmacKeyFormat      `protobuf:"bytes,2,opt,name=hmac_key_format,json=hmacKeyFormat,proto3" json:"hmac_key_format,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AesCtrHmacAeadKeyFormat) Reset() {
	*x = AesCtrHmacAeadKeyFormat{}
	mi := &file_aes_ctr_hmac_aead_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AesCtrHmacAeadKeyFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrHmacAeadKeyFormat) ProtoMessage() {}

func (x *AesCtrHmacAeadKeyFormat) ProtoReflect() protoreflect.Message {
	mi := &file_aes_ctr_hmac_aead_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrHmacAeadKeyFormat.ProtoReflect.Descriptor instead.
func (*AesCtrHmacAeadKeyFormat) Descriptor() ([]byte, []int) {
	return file_aes_ctr_hmac_aead_proto_rawDescGZIP(), []int{0}
}

func (x *AesCtrHmacAeadKeyFormat) GetAesCtrKeyFormat() *aes_ctr_go_proto.AesCtrKeyFormat {
	if x != nil {
		return x.AesCtrKeyFormat
	}
	return nil
}

func (x *AesCtrHmacAeadKeyFormat) GetHmacKeyFormat() *hmac_go_proto.HmacKeyFormat {
	if x != nil {
		return x.HmacKeyFormat
	}
	return nil
}

// key_type: type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey
type AesCtrHmacAeadKey struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Version       uint32                      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	AesCtrKey     *aes_ctr_go_proto.AesCtrKey `protobuf:"bytes,2,opt,name=aes_ctr_key,json=aesCtrKey,proto3" json:"aes_ctr_key,omitempty"`
	HmacKey       *hmac_go_proto.HmacKey      `protobuf:"bytes,3,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AesCtrHmacAeadKey) Reset() {
	*x = AesCtrHmacAeadKey{}
	mi := &file_aes_ctr_hmac_aead_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AesCtrHmacAeadKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrHmacAeadKey) ProtoMessage() {}

func (x *AesCtrHmacAeadKey) ProtoReflect() protoreflect.Message {
	mi := &file_aes_ctr_hmac_aead_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrHmacAeadKey.ProtoReflect.Descriptor instead.
func (*AesCtrHmacAeadKey) Descriptor() ([]byte, []int) {
	return file_aes_ctr_hmac_aead_proto_rawDescGZIP(), []int{1}
}

func (x *AesCtrHmacAeadKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AesCtrHmacAeadKey) GetAesCtrKey() *aes_ctr_go_proto.AesCtrKey {
	if x != nil {
		return x.AesCtrKey
	}
	return nil
}

func (x *AesCtrHmacAeadKey) GetHmacKey() *hmac_go_proto.HmacKey {
	if x != nil {
		return x.HmacKey
	}
	return nil
}

var File_aes_ctr_hmac_aead_proto protoreflect.FileDescriptor

const file_aes_ctr_hmac_aead_proto_rawDesc = "" +
	"\n" +
	"\x17aes_ctr_hmac_aead.proto\x12\x12google.crypto.tink\x1a\x13proto/aes_ctr.proto\x1a\x10proto/hmac.proto\"\xb6\x01\n" +
	"\x17AesCtrHmacAeadKeyFormat\x12P\n" +
	"\x12aes_ctr_key_format\x18\x01 \x01(\v2#.google.crypto.tink.AesCtrKeyFormatR\x0faesCtrKeyFormat\x12I\n" +
	"\x0fhmac_key_format\x18\x02 \x01(\v2!.google.crypto.tink.HmacKeyFormatR\rhmacKeyFormat\"\xa4\x01\n" +
	"\x11AesCtrHmacAeadKey\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12=\n" +
	"\vaes_ctr_key\x18\x02 \x01(\v2\x1d.google.crypto.tink.AesCtrKeyR\taesCtrKey\x126\n" +
	"\bhmac_key\x18\x03 \x01(\v2\x1b.google.crypto.tink.HmacKeyR\ahmacKeyBd\n" +
	"\x1ccom.google.crypto.tink.protoP\x01ZBgithub.com/tink-crypto/tink-go/v2/proto/aes_ctr_hmac_aead_go_protob\x06proto3"

var (
	file_aes_ctr_hmac_aead_proto_rawDescOnce sync.Once
	file_aes_ctr_hmac_aead_proto_rawDescData []byte
)

func file_aes_ctr_hmac_aead_proto_rawDescGZIP() []byte {
	file_aes_ctr_hmac_aead_proto_rawDescOnce.Do(func() {
		file_aes_ctr_hmac_aead_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aes_ctr_hmac_aead_proto_rawDesc), len(file_aes_ctr_hmac_aead_proto_rawDesc)))
	})
	return file_aes_ctr_hmac_aead_proto_rawDescData
}

var file_aes_ctr_hmac_aead_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aes_ctr_hmac_aead_proto_goTypes = []any{
	(*AesCtrHmacAeadKeyFormat)(nil),          // 0: google.crypto.tink.AesCtrHmacAeadKeyFormat
	(*AesCtrHmacAeadKey)(nil),                // 1: google.crypto.tink.AesCtrHmacAeadKey
	(*aes_ctr_go_proto.AesCtrKeyFormat)(nil), // 2: google.crypto.tink.AesCtrKeyFormat
	(*hmac_go_proto.HmacKeyFormat)(nil),      // 3: google.crypto.tink.HmacKeyFormat
	(*aes_ctr_go_proto.AesCtrKey)(nil),       // 4: google.crypto.tink.AesCtrKey
	(*hmac_go_proto.HmacKey)(nil),            // 5: google.crypto.tink.HmacKey
}
var file_aes_ctr_hmac_aead_proto_depIdxs = []int32{
	2, // 0: google.crypto.tink.AesCtrHmacAeadKeyFormat.aes_ctr_key_format:type_name -> google.crypto.tink.AesCtrKeyFormat
	3, // 1: google.crypto.tink.AesCtrHmacAeadKeyFormat.hmac_key_format:type_name -> google.crypto.tink.HmacKeyFormat
	4, // 2: google.crypto.tink.AesCtrHmacAeadKey.aes_ctr_key:type_name -> google.crypto.tink.AesCtrKey
	5, // 3: google.crypto.tink.AesCtrHmacAeadKey.hmac_key:type_name -> google.crypto.tink.HmacKey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_aes_ctr_hmac_aead_proto_init() }
func file_aes_ctr_hmac_aead_proto_init() {
	if File_aes_ctr_hmac_aead_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aes_ctr_hmac_aead_proto_rawDesc), len(file_aes_ctr_hmac_aead_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aes_ctr_hmac_aead_proto_goTypes,
		DependencyIndexes: file_aes_ctr_hmac_aead_proto_depIdxs,
		MessageInfos:      file_aes_ctr_hmac_aead_proto_msgTypes,
	}.Build()
	File_aes_ctr_hmac_aead_proto = out.File
	file_aes_ctr_hmac_aead_proto_goTypes = nil
	file_aes_ctr_hmac_aead_proto_depIdxs = nil
}
